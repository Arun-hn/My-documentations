Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 192.178.0.0/16
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.178.1.0/24
      MapPublicIpOnLaunch: "true"
      AvailabilityZone: "us-east-1a"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.178.2.0/24
      MapPublicIpOnLaunch: "false"
      AvailabilityZone: "us-east-1b"
    
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.178.3.0/24
      MapPublicIpOnLaunch: "false"
      AvailabilityZone: "us-east-1c"

  IntGateway:   
    Type: AWS::EC2::InternetGateway
  
  Attachgateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref IntGateway
 
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC
  
  PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: Attachgateway
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref IntGateway
  
  PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet
        RouteTableId: !Ref PublicRouteTable
  
  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: MyVPC
  
  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC
  
  PrivateSubnetRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable2

  Securitygroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow SSH and Mysql
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC

  MyEC2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-05fa00d4c63e32376"
      InstanceType: "t2.micro"
      KeyName: "08-09-2022"
      SecurityGroupIds: 
        - !Ref Securitygroup
      SubnetId: !Ref PublicSubnet
      UserData: 
        Fn::Base64: !Sub |
          #! /bin/bash
          # Update all packages
          yum -y update
          # Install mysql client 
          yum -y install mysql
  
  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion : "5.7"
      MasterUsername: mysqldb
      MasterUserPassword: mysqldb2022
      Tags:
      - Key: Name
        Value: Master Database
      DBSecurityGroups:  
      - !Ref DbSecurityGroup
      DBSubnetGroupName : !Ref DbSubnetgroup 
  
  DbSecurityGroup: 
    Type: AWS::RDS::DBSecurityGroup
    Properties: 
      EC2VpcId: !Ref MyVPC
      GroupDescription: "Ingress for Amazon EC2 security group"
      DBSecurityGroupIngress: 
        - EC2SecurityGroupId: !Ref Securitygroup
  
  DbSubnetgroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private subnet group for Database
      DBSubnetGroupName: mysubnetgroup
      SubnetIds: 
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  

Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value: !Ref "MyVPC"        

  PublicIP:
    Description: Public IP of EC2 Instance
    Value: !GetAtt MyEC2.PublicIp



